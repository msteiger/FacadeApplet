// This facade is for running the game as an applet

import org.apache.tools.ant.filters.FixCrLfFilter;
import org.apache.tools.ant.taskdefs.condition.IsSigned;

import java.util.concurrent.*

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'

def LWJGL_VERSION = '2.9.1'
def JINPUT_VERSION = '2.0.5'

// Declare "extra properties" (variables) for the project - a Gradle thing that makes them special.
ext {
    // Project paths
	dirUnsigned = "build/unsigned"
    dirApplet = "build/applet"
    subDirLibs = 'libs'
    subDirModules = 'modules'

    // Read environment variables, including variables passed by jenkins continuous integration server
    env = System.getenv()
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Applet
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    mavenCentral()
    maven {
        url "http://www.movingblocks.net:8081/artifactory/repo"
    }
}

configurations {
    applet
    modules {
        description = 'Modules without deps'
        transitive = false
    }
}

dependencies {
    compile (group: 'org.terasology.engine', name: 'engine', version: '+')
    modules (group: 'org.terasology.modules', name: 'Core', version: '+')
}

jar {
   manifest.mainAttributes('Permissions': 'all-permissions')
   manifest.mainAttributes('Codebase': '*')
   manifest.mainAttributes('Application-Name': 'Terasology Applet')
   manifest.mainAttributes('Application-Library-Allowable-Codebase': '*')
   manifest.mainAttributes('Caller-Allowable-Codebase': '*')
   manifest.mainAttributes('Trusted-Only': 'false')
}

// Distribute modules - with the option to provide a list of additional modules to include as dependencies
// Example command including additional modules: gradlew -PextraModules="Signalling,BlockNetwork"
task addModules () {
    description = "Prepares modules for distribution"

    // If the execution was supplied with an extraModules property then include those modules as well
    if (project.hasProperty('extraModules')) {
        extraModules.split(',').each { String dependency ->
            logger.lifecycle('Extra module: ' + dependency)
            dependencies  {
                modules (group: 'org.terasology.modules', name: dependency, version: '+')
            }
        }
    }
}

task copyExtras(type:Copy) {
    description = "Copies all extras to the applet folder"
    
    from ("README.markdown") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
        rename('README.markdown', 'README')
    }
    from ("LICENSE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
    from ("NOTICE") {
        filter(FixCrLfFilter, eol:FixCrLfFilter.CrLf.newInstance("crlf"))
    }
	
    into(dirApplet)
}

task copyLibs(type:Copy, dependsOn: addModules) {
    description = "Copies all libs to the applet folder"
	
    into(dirUnsigned)
	from jar                           	    // this is the applet.jar file

    into(subDirLibs) {
        from configurations.runtime         // these are all applet deps.
    }
	
    into(subDirModules) {
        from configurations.modules
    }
	
	// TODO: Remove this part as soon as LWJGL applet jars work correctly
	// see https://github.com/LWJGL/lwjgl/pull/73
    // Overwrite invalid AppLibAC attribute ("true") in LWJGL 2.9.1 jars
    def lwjglFiles = fileTree(dir: "$dirUnsigned/$subDirLibs", include: 'lwjgl_util*.jar')
	
    doLast {
		lwjglFiles.each {
			logger.lifecycle("Fixing manifest in invalid LWJGL file $it");
			ant.jar(destfile: it, update: true) {
				delegate.manifest {
					attribute(name: 'Application-Library-Allowable-Codebase', value: '*')
				}
			}
		}
	}	
}


task createIndexHtml(type:Copy) {
    
    def noNatives = files(configurations.runtime).filter {
        !it.name.endsWith('natives-linux.jar') &&
        !it.name.endsWith('natives-windows.jar') &&
        !it.name.endsWith('natives-osx.jar')
    }
    
    // add all libs to classpath
    def jars = []
    noNatives.each {
        jars += subDirLibs + '/' + it.getName()
    }
    
    def modules = []
    configurations.modules.each {
        modules += it.getName()
    }
    
    from('index.html')
    into("$dirApplet")
    expand(lwjglVersion: LWJGL_VERSION, jinputVersion : JINPUT_VERSION, jars : jars.join(", "), modules : modules.join(", "))
}

class IncrementalSigningTask extends DefaultTask {

    @Input
    String certFile

    @Input
    String certAlias

    @Input
    String certStorePass

    @Input
    String certKeyPass

    @OutputDirectory
    def File outputDir

    @TaskAction
    void execute(IncrementalTaskInputs inputs) {

        outputDir.mkdirs()

        def pool = Executors.newCachedThreadPool()

        inputs.outOfDate { change ->
            pool.submit({

                def target = new File(outputDir, change.file.name)

                ant.signjar(
                    jar: change.file,
                    signedjar: target,
                    keystore: certFile,
                    alias: certAlias,
                    storepass: certStorePass,
                    keypass: certKeyPass,
                    tsaurl: 'http://time.certum.pl/')

                logger.lifecycle("Signed ${change.file.name}");
            });
        }

        pool.shutdown()
        pool.awaitTermination(10, TimeUnit.MINUTES)
        logger.lifecycle("Signing complete")
    }
}


// Sign the jar files so they can get full rights in a browser
task signLibs(type: IncrementalSigningTask, dependsOn: [copyLibs]) {

	inputs.files fileTree(dirUnsigned)
    outputDir = file("$dirApplet")

    certFile = certificateFile
    certAlias = certificateAlias
    certStorePass = certificateStorePass
    certKeyPass = certificateKeyPass
}


task distApplet(dependsOn: signLibs) {
    description = "Creates an Applet folder"  
}

task distAppletZip(type:Zip) {
    description = "Creates an Applet ZIP file from '$dirApplet'"
    dependsOn distApplet
    //dependsOn createVersionInfoFile
    //dependsOn createVersionFile
    appendix 'Applet'
    from "$dirApplet"
    //from "$buildDir/$versionFileName"
}
